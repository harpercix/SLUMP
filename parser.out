Grammar:

Rule 0     S' -> primary_expression
Rule 1     primary_expression -> function_path ( expression_list )
Rule 2     primary_expression -> ( expr )
Rule 3     primary_expression -> STR
Rule 4     primary_expression -> BOOL
Rule 5     primary_expression -> FLOAT
Rule 6     primary_expression -> INT
Rule 7     function_path -> function_path . ID
Rule 8     function_path -> ID
Rule 9     expression_list -> not_empty_expression_list
Rule 10    expression_list -> <empty>
Rule 11    not_empty_expression_list -> not_empty_expression_list , expr
Rule 12    not_empty_expression_list -> expr
Rule 13    unary_expression -> unary_operator unary_expression
Rule 14    unary_expression -> primary_expression
Rule 15    unary_operator -> ~
Rule 16    unary_operator -> !
Rule 17    unary_operator -> +
Rule 18    unary_operator -> -
Rule 19    multiplicative_expression -> multiplicative_expression % unary_expression
Rule 20    multiplicative_expression -> multiplicative_expression DIVINT unary_expression
Rule 21    multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 22    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 23    multiplicative_expression -> unary_expression
Rule 24    additive_expression -> additive_expression - multiplicative_expression
Rule 25    additive_expression -> additive_expression + multiplicative_expression
Rule 26    additive_expression -> multiplicative_expression
Rule 27    shift_expression -> shift_expression LTLT additive_expression
Rule 28    shift_expression -> shift_expression GTGT additive_expression
Rule 29    shift_expression -> additive_expression
Rule 30    relational_expression -> relational_expression GE shift_expression
Rule 31    relational_expression -> relational_expression LE shift_expression
Rule 32    relational_expression -> relational_expression GT shift_expression
Rule 33    relational_expression -> relational_expression LT shift_expression
Rule 34    relational_expression -> shift_expression
Rule 35    equality_expression -> equality_expression NE relational_expression
Rule 36    equality_expression -> equality_expression EQEQ relational_expression
Rule 37    equality_expression -> relational_expression
Rule 38    band_expression -> band_expression AMP equality_expression
Rule 39    band_expression -> equality_expression
Rule 40    bxor_expression -> bxor_expression ^ band_expression
Rule 41    bxor_expression -> band_expression
Rule 42    bor_expression -> bor_expression PIPE bxor_expression
Rule 43    bor_expression -> bxor_expression
Rule 44    land_expression -> land_expression AMPAMP bor_expression
Rule 45    land_expression -> bor_expression
Rule 46    lor_expression -> lor_expression PIPEPIPE land_expression
Rule 47    lor_expression -> land_expression
Rule 48    expr -> lor_expression

Unused terminals:

    WHILE
    IF
    EQ
    ELSE

Terminals, with rules where they appear:

!                    : 16
%                    : 19
(                    : 1 2
)                    : 1 2
*                    : 22
+                    : 17 25
,                    : 11
-                    : 18 24
.                    : 7
AMP                  : 38
AMPAMP               : 44
BOOL                 : 4
DIV                  : 21
DIVINT               : 20
ELSE                 : 
EQ                   : 
EQEQ                 : 36
FLOAT                : 5
GE                   : 30
GT                   : 32
GTGT                 : 28
ID                   : 7 8
IF                   : 
INT                  : 6
LE                   : 31
LT                   : 33
LTLT                 : 27
NE                   : 35
PIPE                 : 42
PIPEPIPE             : 46
STR                  : 3
WHILE                : 
^                    : 40
error                : 
~                    : 15

Nonterminals, with rules where they appear:

additive_expression  : 24 25 27 28 29
band_expression      : 38 40 41
bor_expression       : 42 44 45
bxor_expression      : 40 42 43
equality_expression  : 35 36 38 39
expr                 : 2 11 12
expression_list      : 1
function_path        : 1 7
land_expression      : 44 46 47
lor_expression       : 46 48
multiplicative_expression : 19 20 21 22 24 25 26
not_empty_expression_list : 9 11
primary_expression   : 14 0
relational_expression : 30 31 32 33 35 36 37
shift_expression     : 27 28 30 31 32 33 34
unary_expression     : 13 19 20 21 22 23
unary_operator       : 13


state 0

    (0) S' -> . primary_expression
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    primary_expression             shift and go to state 1
    function_path                  shift and go to state 2

state 1

    (0) S' -> primary_expression .


state 2

    (1) primary_expression -> function_path . ( expression_list )
    (7) function_path -> function_path . . ID
    (               shift and go to state 9
    .               shift and go to state 10


state 3

    (2) primary_expression -> ( . expr )
    (48) expr -> . lor_expression
    (46) lor_expression -> . lor_expression PIPEPIPE land_expression
    (47) lor_expression -> . land_expression
    (44) land_expression -> . land_expression AMPAMP bor_expression
    (45) land_expression -> . bor_expression
    (42) bor_expression -> . bor_expression PIPE bxor_expression
    (43) bor_expression -> . bxor_expression
    (40) bxor_expression -> . bxor_expression ^ band_expression
    (41) bxor_expression -> . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    expr                           shift and go to state 11
    lor_expression                 shift and go to state 12
    land_expression                shift and go to state 13
    bor_expression                 shift and go to state 14
    bxor_expression                shift and go to state 15
    band_expression                shift and go to state 16
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 4

    (3) primary_expression -> STR .
    $end            reduce using rule 3 (primary_expression -> STR .)
    %               reduce using rule 3 (primary_expression -> STR .)
    DIVINT          reduce using rule 3 (primary_expression -> STR .)
    DIV             reduce using rule 3 (primary_expression -> STR .)
    *               reduce using rule 3 (primary_expression -> STR .)
    -               reduce using rule 3 (primary_expression -> STR .)
    +               reduce using rule 3 (primary_expression -> STR .)
    LTLT            reduce using rule 3 (primary_expression -> STR .)
    GTGT            reduce using rule 3 (primary_expression -> STR .)
    GE              reduce using rule 3 (primary_expression -> STR .)
    LE              reduce using rule 3 (primary_expression -> STR .)
    GT              reduce using rule 3 (primary_expression -> STR .)
    LT              reduce using rule 3 (primary_expression -> STR .)
    NE              reduce using rule 3 (primary_expression -> STR .)
    EQEQ            reduce using rule 3 (primary_expression -> STR .)
    AMP             reduce using rule 3 (primary_expression -> STR .)
    ^               reduce using rule 3 (primary_expression -> STR .)
    PIPE            reduce using rule 3 (primary_expression -> STR .)
    AMPAMP          reduce using rule 3 (primary_expression -> STR .)
    PIPEPIPE        reduce using rule 3 (primary_expression -> STR .)
    )               reduce using rule 3 (primary_expression -> STR .)
    ,               reduce using rule 3 (primary_expression -> STR .)


state 5

    (4) primary_expression -> BOOL .
    $end            reduce using rule 4 (primary_expression -> BOOL .)
    %               reduce using rule 4 (primary_expression -> BOOL .)
    DIVINT          reduce using rule 4 (primary_expression -> BOOL .)
    DIV             reduce using rule 4 (primary_expression -> BOOL .)
    *               reduce using rule 4 (primary_expression -> BOOL .)
    -               reduce using rule 4 (primary_expression -> BOOL .)
    +               reduce using rule 4 (primary_expression -> BOOL .)
    LTLT            reduce using rule 4 (primary_expression -> BOOL .)
    GTGT            reduce using rule 4 (primary_expression -> BOOL .)
    GE              reduce using rule 4 (primary_expression -> BOOL .)
    LE              reduce using rule 4 (primary_expression -> BOOL .)
    GT              reduce using rule 4 (primary_expression -> BOOL .)
    LT              reduce using rule 4 (primary_expression -> BOOL .)
    NE              reduce using rule 4 (primary_expression -> BOOL .)
    EQEQ            reduce using rule 4 (primary_expression -> BOOL .)
    AMP             reduce using rule 4 (primary_expression -> BOOL .)
    ^               reduce using rule 4 (primary_expression -> BOOL .)
    PIPE            reduce using rule 4 (primary_expression -> BOOL .)
    AMPAMP          reduce using rule 4 (primary_expression -> BOOL .)
    PIPEPIPE        reduce using rule 4 (primary_expression -> BOOL .)
    )               reduce using rule 4 (primary_expression -> BOOL .)
    ,               reduce using rule 4 (primary_expression -> BOOL .)


state 6

    (5) primary_expression -> FLOAT .
    $end            reduce using rule 5 (primary_expression -> FLOAT .)
    %               reduce using rule 5 (primary_expression -> FLOAT .)
    DIVINT          reduce using rule 5 (primary_expression -> FLOAT .)
    DIV             reduce using rule 5 (primary_expression -> FLOAT .)
    *               reduce using rule 5 (primary_expression -> FLOAT .)
    -               reduce using rule 5 (primary_expression -> FLOAT .)
    +               reduce using rule 5 (primary_expression -> FLOAT .)
    LTLT            reduce using rule 5 (primary_expression -> FLOAT .)
    GTGT            reduce using rule 5 (primary_expression -> FLOAT .)
    GE              reduce using rule 5 (primary_expression -> FLOAT .)
    LE              reduce using rule 5 (primary_expression -> FLOAT .)
    GT              reduce using rule 5 (primary_expression -> FLOAT .)
    LT              reduce using rule 5 (primary_expression -> FLOAT .)
    NE              reduce using rule 5 (primary_expression -> FLOAT .)
    EQEQ            reduce using rule 5 (primary_expression -> FLOAT .)
    AMP             reduce using rule 5 (primary_expression -> FLOAT .)
    ^               reduce using rule 5 (primary_expression -> FLOAT .)
    PIPE            reduce using rule 5 (primary_expression -> FLOAT .)
    AMPAMP          reduce using rule 5 (primary_expression -> FLOAT .)
    PIPEPIPE        reduce using rule 5 (primary_expression -> FLOAT .)
    )               reduce using rule 5 (primary_expression -> FLOAT .)
    ,               reduce using rule 5 (primary_expression -> FLOAT .)


state 7

    (6) primary_expression -> INT .
    $end            reduce using rule 6 (primary_expression -> INT .)
    %               reduce using rule 6 (primary_expression -> INT .)
    DIVINT          reduce using rule 6 (primary_expression -> INT .)
    DIV             reduce using rule 6 (primary_expression -> INT .)
    *               reduce using rule 6 (primary_expression -> INT .)
    -               reduce using rule 6 (primary_expression -> INT .)
    +               reduce using rule 6 (primary_expression -> INT .)
    LTLT            reduce using rule 6 (primary_expression -> INT .)
    GTGT            reduce using rule 6 (primary_expression -> INT .)
    GE              reduce using rule 6 (primary_expression -> INT .)
    LE              reduce using rule 6 (primary_expression -> INT .)
    GT              reduce using rule 6 (primary_expression -> INT .)
    LT              reduce using rule 6 (primary_expression -> INT .)
    NE              reduce using rule 6 (primary_expression -> INT .)
    EQEQ            reduce using rule 6 (primary_expression -> INT .)
    AMP             reduce using rule 6 (primary_expression -> INT .)
    ^               reduce using rule 6 (primary_expression -> INT .)
    PIPE            reduce using rule 6 (primary_expression -> INT .)
    AMPAMP          reduce using rule 6 (primary_expression -> INT .)
    PIPEPIPE        reduce using rule 6 (primary_expression -> INT .)
    )               reduce using rule 6 (primary_expression -> INT .)
    ,               reduce using rule 6 (primary_expression -> INT .)


state 8

    (8) function_path -> ID .
    (               reduce using rule 8 (function_path -> ID .)
    .               reduce using rule 8 (function_path -> ID .)


state 9

    (1) primary_expression -> function_path ( . expression_list )
    (9) expression_list -> . not_empty_expression_list
    (10) expression_list -> .
    (11) not_empty_expression_list -> . not_empty_expression_list , expr
    (12) not_empty_expression_list -> . expr
    (48) expr -> . lor_expression
    (46) lor_expression -> . lor_expression PIPEPIPE land_expression
    (47) lor_expression -> . land_expression
    (44) land_expression -> . land_expression AMPAMP bor_expression
    (45) land_expression -> . bor_expression
    (42) bor_expression -> . bor_expression PIPE bxor_expression
    (43) bor_expression -> . bxor_expression
    (40) bxor_expression -> . bxor_expression ^ band_expression
    (41) bxor_expression -> . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    )               reduce using rule 10 (expression_list -> .)
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    function_path                  shift and go to state 2
    expression_list                shift and go to state 29
    not_empty_expression_list      shift and go to state 30
    expr                           shift and go to state 31
    lor_expression                 shift and go to state 12
    land_expression                shift and go to state 13
    bor_expression                 shift and go to state 14
    bxor_expression                shift and go to state 15
    band_expression                shift and go to state 16
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26

state 10

    (7) function_path -> function_path . . ID
    ID              shift and go to state 32


state 11

    (2) primary_expression -> ( expr . )
    )               shift and go to state 33


state 12

    (48) expr -> lor_expression .
    (46) lor_expression -> lor_expression . PIPEPIPE land_expression
    )               reduce using rule 48 (expr -> lor_expression .)
    ,               reduce using rule 48 (expr -> lor_expression .)
    PIPEPIPE        shift and go to state 34


state 13

    (47) lor_expression -> land_expression .
    (44) land_expression -> land_expression . AMPAMP bor_expression
    PIPEPIPE        reduce using rule 47 (lor_expression -> land_expression .)
    )               reduce using rule 47 (lor_expression -> land_expression .)
    ,               reduce using rule 47 (lor_expression -> land_expression .)
    AMPAMP          shift and go to state 35


state 14

    (45) land_expression -> bor_expression .
    (42) bor_expression -> bor_expression . PIPE bxor_expression
    AMPAMP          reduce using rule 45 (land_expression -> bor_expression .)
    PIPEPIPE        reduce using rule 45 (land_expression -> bor_expression .)
    )               reduce using rule 45 (land_expression -> bor_expression .)
    ,               reduce using rule 45 (land_expression -> bor_expression .)
    PIPE            shift and go to state 36


state 15

    (43) bor_expression -> bxor_expression .
    (40) bxor_expression -> bxor_expression . ^ band_expression
    PIPE            reduce using rule 43 (bor_expression -> bxor_expression .)
    AMPAMP          reduce using rule 43 (bor_expression -> bxor_expression .)
    PIPEPIPE        reduce using rule 43 (bor_expression -> bxor_expression .)
    )               reduce using rule 43 (bor_expression -> bxor_expression .)
    ,               reduce using rule 43 (bor_expression -> bxor_expression .)
    ^               shift and go to state 37


state 16

    (41) bxor_expression -> band_expression .
    (38) band_expression -> band_expression . AMP equality_expression
    ^               reduce using rule 41 (bxor_expression -> band_expression .)
    PIPE            reduce using rule 41 (bxor_expression -> band_expression .)
    AMPAMP          reduce using rule 41 (bxor_expression -> band_expression .)
    PIPEPIPE        reduce using rule 41 (bxor_expression -> band_expression .)
    )               reduce using rule 41 (bxor_expression -> band_expression .)
    ,               reduce using rule 41 (bxor_expression -> band_expression .)
    AMP             shift and go to state 38


state 17

    (39) band_expression -> equality_expression .
    (35) equality_expression -> equality_expression . NE relational_expression
    (36) equality_expression -> equality_expression . EQEQ relational_expression
    AMP             reduce using rule 39 (band_expression -> equality_expression .)
    ^               reduce using rule 39 (band_expression -> equality_expression .)
    PIPE            reduce using rule 39 (band_expression -> equality_expression .)
    AMPAMP          reduce using rule 39 (band_expression -> equality_expression .)
    PIPEPIPE        reduce using rule 39 (band_expression -> equality_expression .)
    )               reduce using rule 39 (band_expression -> equality_expression .)
    ,               reduce using rule 39 (band_expression -> equality_expression .)
    NE              shift and go to state 39
    EQEQ            shift and go to state 40


state 18

    (37) equality_expression -> relational_expression .
    (30) relational_expression -> relational_expression . GE shift_expression
    (31) relational_expression -> relational_expression . LE shift_expression
    (32) relational_expression -> relational_expression . GT shift_expression
    (33) relational_expression -> relational_expression . LT shift_expression
    NE              reduce using rule 37 (equality_expression -> relational_expression .)
    EQEQ            reduce using rule 37 (equality_expression -> relational_expression .)
    AMP             reduce using rule 37 (equality_expression -> relational_expression .)
    ^               reduce using rule 37 (equality_expression -> relational_expression .)
    PIPE            reduce using rule 37 (equality_expression -> relational_expression .)
    AMPAMP          reduce using rule 37 (equality_expression -> relational_expression .)
    PIPEPIPE        reduce using rule 37 (equality_expression -> relational_expression .)
    )               reduce using rule 37 (equality_expression -> relational_expression .)
    ,               reduce using rule 37 (equality_expression -> relational_expression .)
    GE              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44


state 19

    (34) relational_expression -> shift_expression .
    (27) shift_expression -> shift_expression . LTLT additive_expression
    (28) shift_expression -> shift_expression . GTGT additive_expression
    GE              reduce using rule 34 (relational_expression -> shift_expression .)
    LE              reduce using rule 34 (relational_expression -> shift_expression .)
    GT              reduce using rule 34 (relational_expression -> shift_expression .)
    LT              reduce using rule 34 (relational_expression -> shift_expression .)
    NE              reduce using rule 34 (relational_expression -> shift_expression .)
    EQEQ            reduce using rule 34 (relational_expression -> shift_expression .)
    AMP             reduce using rule 34 (relational_expression -> shift_expression .)
    ^               reduce using rule 34 (relational_expression -> shift_expression .)
    PIPE            reduce using rule 34 (relational_expression -> shift_expression .)
    AMPAMP          reduce using rule 34 (relational_expression -> shift_expression .)
    PIPEPIPE        reduce using rule 34 (relational_expression -> shift_expression .)
    )               reduce using rule 34 (relational_expression -> shift_expression .)
    ,               reduce using rule 34 (relational_expression -> shift_expression .)
    LTLT            shift and go to state 45
    GTGT            shift and go to state 46


state 20

    (29) shift_expression -> additive_expression .
    (24) additive_expression -> additive_expression . - multiplicative_expression
    (25) additive_expression -> additive_expression . + multiplicative_expression
    LTLT            reduce using rule 29 (shift_expression -> additive_expression .)
    GTGT            reduce using rule 29 (shift_expression -> additive_expression .)
    GE              reduce using rule 29 (shift_expression -> additive_expression .)
    LE              reduce using rule 29 (shift_expression -> additive_expression .)
    GT              reduce using rule 29 (shift_expression -> additive_expression .)
    LT              reduce using rule 29 (shift_expression -> additive_expression .)
    NE              reduce using rule 29 (shift_expression -> additive_expression .)
    EQEQ            reduce using rule 29 (shift_expression -> additive_expression .)
    AMP             reduce using rule 29 (shift_expression -> additive_expression .)
    ^               reduce using rule 29 (shift_expression -> additive_expression .)
    PIPE            reduce using rule 29 (shift_expression -> additive_expression .)
    AMPAMP          reduce using rule 29 (shift_expression -> additive_expression .)
    PIPEPIPE        reduce using rule 29 (shift_expression -> additive_expression .)
    )               reduce using rule 29 (shift_expression -> additive_expression .)
    ,               reduce using rule 29 (shift_expression -> additive_expression .)
    -               shift and go to state 47
    +               shift and go to state 48


state 21

    (18) unary_operator -> - .
    ~               reduce using rule 18 (unary_operator -> - .)
    !               reduce using rule 18 (unary_operator -> - .)
    +               reduce using rule 18 (unary_operator -> - .)
    -               reduce using rule 18 (unary_operator -> - .)
    (               reduce using rule 18 (unary_operator -> - .)
    STR             reduce using rule 18 (unary_operator -> - .)
    BOOL            reduce using rule 18 (unary_operator -> - .)
    FLOAT           reduce using rule 18 (unary_operator -> - .)
    INT             reduce using rule 18 (unary_operator -> - .)
    ID              reduce using rule 18 (unary_operator -> - .)


state 22

    (26) additive_expression -> multiplicative_expression .
    (19) multiplicative_expression -> multiplicative_expression . % unary_expression
    (20) multiplicative_expression -> multiplicative_expression . DIVINT unary_expression
    (21) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (22) multiplicative_expression -> multiplicative_expression . * unary_expression
    -               reduce using rule 26 (additive_expression -> multiplicative_expression .)
    +               reduce using rule 26 (additive_expression -> multiplicative_expression .)
    LTLT            reduce using rule 26 (additive_expression -> multiplicative_expression .)
    GTGT            reduce using rule 26 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 26 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 26 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 26 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 26 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 26 (additive_expression -> multiplicative_expression .)
    EQEQ            reduce using rule 26 (additive_expression -> multiplicative_expression .)
    AMP             reduce using rule 26 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 26 (additive_expression -> multiplicative_expression .)
    PIPE            reduce using rule 26 (additive_expression -> multiplicative_expression .)
    AMPAMP          reduce using rule 26 (additive_expression -> multiplicative_expression .)
    PIPEPIPE        reduce using rule 26 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 26 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 26 (additive_expression -> multiplicative_expression .)
    %               shift and go to state 49
    DIVINT          shift and go to state 50
    DIV             shift and go to state 51
    *               shift and go to state 52


state 23

    (17) unary_operator -> + .
    ~               reduce using rule 17 (unary_operator -> + .)
    !               reduce using rule 17 (unary_operator -> + .)
    +               reduce using rule 17 (unary_operator -> + .)
    -               reduce using rule 17 (unary_operator -> + .)
    (               reduce using rule 17 (unary_operator -> + .)
    STR             reduce using rule 17 (unary_operator -> + .)
    BOOL            reduce using rule 17 (unary_operator -> + .)
    FLOAT           reduce using rule 17 (unary_operator -> + .)
    INT             reduce using rule 17 (unary_operator -> + .)
    ID              reduce using rule 17 (unary_operator -> + .)


state 24

    (23) multiplicative_expression -> unary_expression .
    %               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    DIVINT          reduce using rule 23 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 23 (multiplicative_expression -> unary_expression .)
    *               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    LTLT            reduce using rule 23 (multiplicative_expression -> unary_expression .)
    GTGT            reduce using rule 23 (multiplicative_expression -> unary_expression .)
    GE              reduce using rule 23 (multiplicative_expression -> unary_expression .)
    LE              reduce using rule 23 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 23 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 23 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 23 (multiplicative_expression -> unary_expression .)
    EQEQ            reduce using rule 23 (multiplicative_expression -> unary_expression .)
    AMP             reduce using rule 23 (multiplicative_expression -> unary_expression .)
    ^               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    PIPE            reduce using rule 23 (multiplicative_expression -> unary_expression .)
    AMPAMP          reduce using rule 23 (multiplicative_expression -> unary_expression .)
    PIPEPIPE        reduce using rule 23 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 23 (multiplicative_expression -> unary_expression .)


state 25

    (13) unary_expression -> unary_operator . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    unary_operator                 shift and go to state 25
    unary_expression               shift and go to state 53
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 26

    (14) unary_expression -> primary_expression .
    %               reduce using rule 14 (unary_expression -> primary_expression .)
    DIVINT          reduce using rule 14 (unary_expression -> primary_expression .)
    DIV             reduce using rule 14 (unary_expression -> primary_expression .)
    *               reduce using rule 14 (unary_expression -> primary_expression .)
    -               reduce using rule 14 (unary_expression -> primary_expression .)
    +               reduce using rule 14 (unary_expression -> primary_expression .)
    LTLT            reduce using rule 14 (unary_expression -> primary_expression .)
    GTGT            reduce using rule 14 (unary_expression -> primary_expression .)
    GE              reduce using rule 14 (unary_expression -> primary_expression .)
    LE              reduce using rule 14 (unary_expression -> primary_expression .)
    GT              reduce using rule 14 (unary_expression -> primary_expression .)
    LT              reduce using rule 14 (unary_expression -> primary_expression .)
    NE              reduce using rule 14 (unary_expression -> primary_expression .)
    EQEQ            reduce using rule 14 (unary_expression -> primary_expression .)
    AMP             reduce using rule 14 (unary_expression -> primary_expression .)
    ^               reduce using rule 14 (unary_expression -> primary_expression .)
    PIPE            reduce using rule 14 (unary_expression -> primary_expression .)
    AMPAMP          reduce using rule 14 (unary_expression -> primary_expression .)
    PIPEPIPE        reduce using rule 14 (unary_expression -> primary_expression .)
    )               reduce using rule 14 (unary_expression -> primary_expression .)
    ,               reduce using rule 14 (unary_expression -> primary_expression .)


state 27

    (15) unary_operator -> ~ .
    ~               reduce using rule 15 (unary_operator -> ~ .)
    !               reduce using rule 15 (unary_operator -> ~ .)
    +               reduce using rule 15 (unary_operator -> ~ .)
    -               reduce using rule 15 (unary_operator -> ~ .)
    (               reduce using rule 15 (unary_operator -> ~ .)
    STR             reduce using rule 15 (unary_operator -> ~ .)
    BOOL            reduce using rule 15 (unary_operator -> ~ .)
    FLOAT           reduce using rule 15 (unary_operator -> ~ .)
    INT             reduce using rule 15 (unary_operator -> ~ .)
    ID              reduce using rule 15 (unary_operator -> ~ .)


state 28

    (16) unary_operator -> ! .
    ~               reduce using rule 16 (unary_operator -> ! .)
    !               reduce using rule 16 (unary_operator -> ! .)
    +               reduce using rule 16 (unary_operator -> ! .)
    -               reduce using rule 16 (unary_operator -> ! .)
    (               reduce using rule 16 (unary_operator -> ! .)
    STR             reduce using rule 16 (unary_operator -> ! .)
    BOOL            reduce using rule 16 (unary_operator -> ! .)
    FLOAT           reduce using rule 16 (unary_operator -> ! .)
    INT             reduce using rule 16 (unary_operator -> ! .)
    ID              reduce using rule 16 (unary_operator -> ! .)


state 29

    (1) primary_expression -> function_path ( expression_list . )
    )               shift and go to state 54


state 30

    (9) expression_list -> not_empty_expression_list .
    (11) not_empty_expression_list -> not_empty_expression_list . , expr
    )               reduce using rule 9 (expression_list -> not_empty_expression_list .)
    ,               shift and go to state 55


state 31

    (12) not_empty_expression_list -> expr .
    ,               reduce using rule 12 (not_empty_expression_list -> expr .)
    )               reduce using rule 12 (not_empty_expression_list -> expr .)


state 32

    (7) function_path -> function_path . ID .
    (               reduce using rule 7 (function_path -> function_path . ID .)
    .               reduce using rule 7 (function_path -> function_path . ID .)


state 33

    (2) primary_expression -> ( expr ) .
    $end            reduce using rule 2 (primary_expression -> ( expr ) .)
    %               reduce using rule 2 (primary_expression -> ( expr ) .)
    DIVINT          reduce using rule 2 (primary_expression -> ( expr ) .)
    DIV             reduce using rule 2 (primary_expression -> ( expr ) .)
    *               reduce using rule 2 (primary_expression -> ( expr ) .)
    -               reduce using rule 2 (primary_expression -> ( expr ) .)
    +               reduce using rule 2 (primary_expression -> ( expr ) .)
    LTLT            reduce using rule 2 (primary_expression -> ( expr ) .)
    GTGT            reduce using rule 2 (primary_expression -> ( expr ) .)
    GE              reduce using rule 2 (primary_expression -> ( expr ) .)
    LE              reduce using rule 2 (primary_expression -> ( expr ) .)
    GT              reduce using rule 2 (primary_expression -> ( expr ) .)
    LT              reduce using rule 2 (primary_expression -> ( expr ) .)
    NE              reduce using rule 2 (primary_expression -> ( expr ) .)
    EQEQ            reduce using rule 2 (primary_expression -> ( expr ) .)
    AMP             reduce using rule 2 (primary_expression -> ( expr ) .)
    ^               reduce using rule 2 (primary_expression -> ( expr ) .)
    PIPE            reduce using rule 2 (primary_expression -> ( expr ) .)
    AMPAMP          reduce using rule 2 (primary_expression -> ( expr ) .)
    PIPEPIPE        reduce using rule 2 (primary_expression -> ( expr ) .)
    )               reduce using rule 2 (primary_expression -> ( expr ) .)
    ,               reduce using rule 2 (primary_expression -> ( expr ) .)


state 34

    (46) lor_expression -> lor_expression PIPEPIPE . land_expression
    (44) land_expression -> . land_expression AMPAMP bor_expression
    (45) land_expression -> . bor_expression
    (42) bor_expression -> . bor_expression PIPE bxor_expression
    (43) bor_expression -> . bxor_expression
    (40) bxor_expression -> . bxor_expression ^ band_expression
    (41) bxor_expression -> . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    land_expression                shift and go to state 56
    bor_expression                 shift and go to state 14
    bxor_expression                shift and go to state 15
    band_expression                shift and go to state 16
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 35

    (44) land_expression -> land_expression AMPAMP . bor_expression
    (42) bor_expression -> . bor_expression PIPE bxor_expression
    (43) bor_expression -> . bxor_expression
    (40) bxor_expression -> . bxor_expression ^ band_expression
    (41) bxor_expression -> . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    bor_expression                 shift and go to state 57
    bxor_expression                shift and go to state 15
    band_expression                shift and go to state 16
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 36

    (42) bor_expression -> bor_expression PIPE . bxor_expression
    (40) bxor_expression -> . bxor_expression ^ band_expression
    (41) bxor_expression -> . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    bxor_expression                shift and go to state 58
    band_expression                shift and go to state 16
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 37

    (40) bxor_expression -> bxor_expression ^ . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    band_expression                shift and go to state 59
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 38

    (38) band_expression -> band_expression AMP . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    equality_expression            shift and go to state 60
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 39

    (35) equality_expression -> equality_expression NE . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    relational_expression          shift and go to state 61
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 40

    (36) equality_expression -> equality_expression EQEQ . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    relational_expression          shift and go to state 62
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 41

    (30) relational_expression -> relational_expression GE . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    shift_expression               shift and go to state 63
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 42

    (31) relational_expression -> relational_expression LE . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    shift_expression               shift and go to state 64
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 43

    (32) relational_expression -> relational_expression GT . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    shift_expression               shift and go to state 65
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 44

    (33) relational_expression -> relational_expression LT . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    shift_expression               shift and go to state 66
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 45

    (27) shift_expression -> shift_expression LTLT . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    additive_expression            shift and go to state 67
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 46

    (28) shift_expression -> shift_expression GTGT . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 47

    (24) additive_expression -> additive_expression - . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    multiplicative_expression      shift and go to state 69
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 48

    (25) additive_expression -> additive_expression + . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    multiplicative_expression      shift and go to state 70
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 49

    (19) multiplicative_expression -> multiplicative_expression % . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    unary_expression               shift and go to state 71
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 50

    (20) multiplicative_expression -> multiplicative_expression DIVINT . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    unary_expression               shift and go to state 72
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 51

    (21) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    unary_expression               shift and go to state 73
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 52

    (22) multiplicative_expression -> multiplicative_expression * . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    unary_expression               shift and go to state 74
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 53

    (13) unary_expression -> unary_operator unary_expression .
    %               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    DIVINT          reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    DIV             reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    *               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    -               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    +               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    LTLT            reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    GTGT            reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    GE              reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    LE              reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    GT              reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    LT              reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    NE              reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    EQEQ            reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    AMP             reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    ^               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    PIPE            reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    AMPAMP          reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    PIPEPIPE        reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    )               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)
    ,               reduce using rule 13 (unary_expression -> unary_operator unary_expression .)


state 54

    (1) primary_expression -> function_path ( expression_list ) .
    $end            reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    %               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    DIVINT          reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    DIV             reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    *               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    -               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    +               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    LTLT            reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    GTGT            reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    GE              reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    LE              reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    GT              reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    LT              reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    NE              reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    EQEQ            reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    AMP             reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    ^               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    PIPE            reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    AMPAMP          reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    PIPEPIPE        reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    )               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)
    ,               reduce using rule 1 (primary_expression -> function_path ( expression_list ) .)


state 55

    (11) not_empty_expression_list -> not_empty_expression_list , . expr
    (48) expr -> . lor_expression
    (46) lor_expression -> . lor_expression PIPEPIPE land_expression
    (47) lor_expression -> . land_expression
    (44) land_expression -> . land_expression AMPAMP bor_expression
    (45) land_expression -> . bor_expression
    (42) bor_expression -> . bor_expression PIPE bxor_expression
    (43) bor_expression -> . bxor_expression
    (40) bxor_expression -> . bxor_expression ^ band_expression
    (41) bxor_expression -> . band_expression
    (38) band_expression -> . band_expression AMP equality_expression
    (39) band_expression -> . equality_expression
    (35) equality_expression -> . equality_expression NE relational_expression
    (36) equality_expression -> . equality_expression EQEQ relational_expression
    (37) equality_expression -> . relational_expression
    (30) relational_expression -> . relational_expression GE shift_expression
    (31) relational_expression -> . relational_expression LE shift_expression
    (32) relational_expression -> . relational_expression GT shift_expression
    (33) relational_expression -> . relational_expression LT shift_expression
    (34) relational_expression -> . shift_expression
    (27) shift_expression -> . shift_expression LTLT additive_expression
    (28) shift_expression -> . shift_expression GTGT additive_expression
    (29) shift_expression -> . additive_expression
    (24) additive_expression -> . additive_expression - multiplicative_expression
    (25) additive_expression -> . additive_expression + multiplicative_expression
    (26) additive_expression -> . multiplicative_expression
    (19) multiplicative_expression -> . multiplicative_expression % unary_expression
    (20) multiplicative_expression -> . multiplicative_expression DIVINT unary_expression
    (21) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . unary_expression
    (13) unary_expression -> . unary_operator unary_expression
    (14) unary_expression -> . primary_expression
    (15) unary_operator -> . ~
    (16) unary_operator -> . !
    (17) unary_operator -> . +
    (18) unary_operator -> . -
    (1) primary_expression -> . function_path ( expression_list )
    (2) primary_expression -> . ( expr )
    (3) primary_expression -> . STR
    (4) primary_expression -> . BOOL
    (5) primary_expression -> . FLOAT
    (6) primary_expression -> . INT
    (7) function_path -> . function_path . ID
    (8) function_path -> . ID
    ~               shift and go to state 27
    !               shift and go to state 28
    +               shift and go to state 23
    -               shift and go to state 21
    (               shift and go to state 3
    STR             shift and go to state 4
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 6
    INT             shift and go to state 7
    ID              shift and go to state 8

    expr                           shift and go to state 75
    lor_expression                 shift and go to state 12
    land_expression                shift and go to state 13
    bor_expression                 shift and go to state 14
    bxor_expression                shift and go to state 15
    band_expression                shift and go to state 16
    equality_expression            shift and go to state 17
    relational_expression          shift and go to state 18
    shift_expression               shift and go to state 19
    additive_expression            shift and go to state 20
    multiplicative_expression      shift and go to state 22
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 26
    function_path                  shift and go to state 2

state 56

    (46) lor_expression -> lor_expression PIPEPIPE land_expression .
    (44) land_expression -> land_expression . AMPAMP bor_expression
    PIPEPIPE        reduce using rule 46 (lor_expression -> lor_expression PIPEPIPE land_expression .)
    )               reduce using rule 46 (lor_expression -> lor_expression PIPEPIPE land_expression .)
    ,               reduce using rule 46 (lor_expression -> lor_expression PIPEPIPE land_expression .)
    AMPAMP          shift and go to state 35


state 57

    (44) land_expression -> land_expression AMPAMP bor_expression .
    (42) bor_expression -> bor_expression . PIPE bxor_expression
    AMPAMP          reduce using rule 44 (land_expression -> land_expression AMPAMP bor_expression .)
    PIPEPIPE        reduce using rule 44 (land_expression -> land_expression AMPAMP bor_expression .)
    )               reduce using rule 44 (land_expression -> land_expression AMPAMP bor_expression .)
    ,               reduce using rule 44 (land_expression -> land_expression AMPAMP bor_expression .)
    PIPE            shift and go to state 36


state 58

    (42) bor_expression -> bor_expression PIPE bxor_expression .
    (40) bxor_expression -> bxor_expression . ^ band_expression
    PIPE            reduce using rule 42 (bor_expression -> bor_expression PIPE bxor_expression .)
    AMPAMP          reduce using rule 42 (bor_expression -> bor_expression PIPE bxor_expression .)
    PIPEPIPE        reduce using rule 42 (bor_expression -> bor_expression PIPE bxor_expression .)
    )               reduce using rule 42 (bor_expression -> bor_expression PIPE bxor_expression .)
    ,               reduce using rule 42 (bor_expression -> bor_expression PIPE bxor_expression .)
    ^               shift and go to state 37


state 59

    (40) bxor_expression -> bxor_expression ^ band_expression .
    (38) band_expression -> band_expression . AMP equality_expression
    ^               reduce using rule 40 (bxor_expression -> bxor_expression ^ band_expression .)
    PIPE            reduce using rule 40 (bxor_expression -> bxor_expression ^ band_expression .)
    AMPAMP          reduce using rule 40 (bxor_expression -> bxor_expression ^ band_expression .)
    PIPEPIPE        reduce using rule 40 (bxor_expression -> bxor_expression ^ band_expression .)
    )               reduce using rule 40 (bxor_expression -> bxor_expression ^ band_expression .)
    ,               reduce using rule 40 (bxor_expression -> bxor_expression ^ band_expression .)
    AMP             shift and go to state 38


state 60

    (38) band_expression -> band_expression AMP equality_expression .
    (35) equality_expression -> equality_expression . NE relational_expression
    (36) equality_expression -> equality_expression . EQEQ relational_expression
    AMP             reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    ^               reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    PIPE            reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    AMPAMP          reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    PIPEPIPE        reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    )               reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    ,               reduce using rule 38 (band_expression -> band_expression AMP equality_expression .)
    NE              shift and go to state 39
    EQEQ            shift and go to state 40


state 61

    (35) equality_expression -> equality_expression NE relational_expression .
    (30) relational_expression -> relational_expression . GE shift_expression
    (31) relational_expression -> relational_expression . LE shift_expression
    (32) relational_expression -> relational_expression . GT shift_expression
    (33) relational_expression -> relational_expression . LT shift_expression
    NE              reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    EQEQ            reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    AMP             reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    ^               reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    PIPE            reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    AMPAMP          reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    PIPEPIPE        reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    )               reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    ,               reduce using rule 35 (equality_expression -> equality_expression NE relational_expression .)
    GE              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44


state 62

    (36) equality_expression -> equality_expression EQEQ relational_expression .
    (30) relational_expression -> relational_expression . GE shift_expression
    (31) relational_expression -> relational_expression . LE shift_expression
    (32) relational_expression -> relational_expression . GT shift_expression
    (33) relational_expression -> relational_expression . LT shift_expression
    NE              reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    EQEQ            reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    AMP             reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    ^               reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    PIPE            reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    AMPAMP          reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    PIPEPIPE        reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    )               reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    ,               reduce using rule 36 (equality_expression -> equality_expression EQEQ relational_expression .)
    GE              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44


state 63

    (30) relational_expression -> relational_expression GE shift_expression .
    (27) shift_expression -> shift_expression . LTLT additive_expression
    (28) shift_expression -> shift_expression . GTGT additive_expression
    GE              reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    LT              reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    EQEQ            reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    AMP             reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    ^               reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    PIPE            reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    AMPAMP          reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    PIPEPIPE        reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    )               reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    ,               reduce using rule 30 (relational_expression -> relational_expression GE shift_expression .)
    LTLT            shift and go to state 45
    GTGT            shift and go to state 46


state 64

    (31) relational_expression -> relational_expression LE shift_expression .
    (27) shift_expression -> shift_expression . LTLT additive_expression
    (28) shift_expression -> shift_expression . GTGT additive_expression
    GE              reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    LT              reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    EQEQ            reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    AMP             reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    ^               reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    PIPE            reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    AMPAMP          reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    PIPEPIPE        reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    )               reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    ,               reduce using rule 31 (relational_expression -> relational_expression LE shift_expression .)
    LTLT            shift and go to state 45
    GTGT            shift and go to state 46


state 65

    (32) relational_expression -> relational_expression GT shift_expression .
    (27) shift_expression -> shift_expression . LTLT additive_expression
    (28) shift_expression -> shift_expression . GTGT additive_expression
    GE              reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    LT              reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    EQEQ            reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    AMP             reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    ^               reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    PIPE            reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    AMPAMP          reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    PIPEPIPE        reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    )               reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    ,               reduce using rule 32 (relational_expression -> relational_expression GT shift_expression .)
    LTLT            shift and go to state 45
    GTGT            shift and go to state 46


state 66

    (33) relational_expression -> relational_expression LT shift_expression .
    (27) shift_expression -> shift_expression . LTLT additive_expression
    (28) shift_expression -> shift_expression . GTGT additive_expression
    GE              reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    LT              reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    EQEQ            reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    AMP             reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    ^               reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    PIPE            reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    AMPAMP          reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    PIPEPIPE        reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    )               reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    ,               reduce using rule 33 (relational_expression -> relational_expression LT shift_expression .)
    LTLT            shift and go to state 45
    GTGT            shift and go to state 46


state 67

    (27) shift_expression -> shift_expression LTLT additive_expression .
    (24) additive_expression -> additive_expression . - multiplicative_expression
    (25) additive_expression -> additive_expression . + multiplicative_expression
    LTLT            reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    GTGT            reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    GE              reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    LE              reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    GT              reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    LT              reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    NE              reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    EQEQ            reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    AMP             reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    ^               reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    PIPE            reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    AMPAMP          reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    PIPEPIPE        reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    )               reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    ,               reduce using rule 27 (shift_expression -> shift_expression LTLT additive_expression .)
    -               shift and go to state 47
    +               shift and go to state 48


state 68

    (28) shift_expression -> shift_expression GTGT additive_expression .
    (24) additive_expression -> additive_expression . - multiplicative_expression
    (25) additive_expression -> additive_expression . + multiplicative_expression
    LTLT            reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    GTGT            reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    GE              reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    LE              reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    GT              reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    LT              reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    NE              reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    EQEQ            reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    AMP             reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    ^               reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    PIPE            reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    AMPAMP          reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    PIPEPIPE        reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    )               reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    ,               reduce using rule 28 (shift_expression -> shift_expression GTGT additive_expression .)
    -               shift and go to state 47
    +               shift and go to state 48


state 69

    (24) additive_expression -> additive_expression - multiplicative_expression .
    (19) multiplicative_expression -> multiplicative_expression . % unary_expression
    (20) multiplicative_expression -> multiplicative_expression . DIVINT unary_expression
    (21) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (22) multiplicative_expression -> multiplicative_expression . * unary_expression
    -               reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    +               reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    LTLT            reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    GTGT            reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    GE              reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    LE              reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    GT              reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    LT              reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    NE              reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    EQEQ            reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    AMP             reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    PIPE            reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    AMPAMP          reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    PIPEPIPE        reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 24 (additive_expression -> additive_expression - multiplicative_expression .)
    %               shift and go to state 49
    DIVINT          shift and go to state 50
    DIV             shift and go to state 51
    *               shift and go to state 52


state 70

    (25) additive_expression -> additive_expression + multiplicative_expression .
    (19) multiplicative_expression -> multiplicative_expression . % unary_expression
    (20) multiplicative_expression -> multiplicative_expression . DIVINT unary_expression
    (21) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (22) multiplicative_expression -> multiplicative_expression . * unary_expression
    -               reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    +               reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    LTLT            reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    GTGT            reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    GE              reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    LE              reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    GT              reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    LT              reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    NE              reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    EQEQ            reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    AMP             reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    PIPE            reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    AMPAMP          reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    PIPEPIPE        reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 25 (additive_expression -> additive_expression + multiplicative_expression .)
    %               shift and go to state 49
    DIVINT          shift and go to state 50
    DIV             shift and go to state 51
    *               shift and go to state 52


state 71

    (19) multiplicative_expression -> multiplicative_expression % unary_expression .
    %               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    DIVINT          reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    DIV             reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    *               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    -               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    +               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LTLT            reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    GTGT            reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    GE              reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LE              reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    GT              reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LT              reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    NE              reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    EQEQ            reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    AMP             reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ^               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    PIPE            reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    AMPAMP          reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    PIPEPIPE        reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    )               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ,               reduce using rule 19 (multiplicative_expression -> multiplicative_expression % unary_expression .)


state 72

    (20) multiplicative_expression -> multiplicative_expression DIVINT unary_expression .
    %               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    DIVINT          reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    DIV             reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    *               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    -               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    +               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    LTLT            reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    GTGT            reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    GE              reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    LE              reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    GT              reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    LT              reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    NE              reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    EQEQ            reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    AMP             reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    ^               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    PIPE            reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    AMPAMP          reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    PIPEPIPE        reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    )               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)
    ,               reduce using rule 20 (multiplicative_expression -> multiplicative_expression DIVINT unary_expression .)


state 73

    (21) multiplicative_expression -> multiplicative_expression DIV unary_expression .
    %               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIVINT          reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    *               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    -               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    +               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LTLT            reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GTGT            reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GE              reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LE              reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GT              reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LT              reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    NE              reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQEQ            reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AMP             reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ^               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PIPE            reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AMPAMP          reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PIPEPIPE        reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    )               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ,               reduce using rule 21 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 74

    (22) multiplicative_expression -> multiplicative_expression * unary_expression .
    %               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DIVINT          reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DIV             reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    *               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LTLT            reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GTGT            reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GE              reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LE              reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GT              reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LT              reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NE              reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQEQ            reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    AMP             reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ^               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    PIPE            reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    AMPAMP          reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    PIPEPIPE        reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 75

    (11) not_empty_expression_list -> not_empty_expression_list , expr .
    ,               reduce using rule 11 (not_empty_expression_list -> not_empty_expression_list , expr .)
    )               reduce using rule 11 (not_empty_expression_list -> not_empty_expression_list , expr .)
